#include <Wire.h>
#include <SoftwareSerial.h>

#include <Adafruit_GFX.h>    //그래픽 라이브러리
#include <Adafruit_ST7789.h> //그래픽 라이브러리
#include <SPI.h>

 
#define USE_ARDUINO_INTERRUPTS true    // Set-up low-level interrupts for most acurate BPM math.
#include <PulseSensorPlayground.h>     // 심박수 라이브러리

#define PULSE_SIG 0                    // PulseSensor PURPLE WIRE connected to ANALOG PIN 0
#define THREASHOLD 550               // Determine which Signal to "count as a beat" and which to ignore.
#define TFT_CS         8
#define TFT_DC         9
#define TFT_RST        10
#define REPORTING_PERIOD_MS     1000
#define RX 3
#define TX 2
SoftwareSerial BT(TX, RX); // 블루투스 설정                                       
                                             
PulseSensorPlayground pulseSensor;            // Creates an instance of the PulseSensorPlayground object called "pulseSensor"
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);


char chConvert_Int[16];                       // 정수 -> 문자열 변환용 캐릭터형 변수 선언
char chTime[15];
bool bHeart_Status = false;                   // bool 변수 선언

int Threshold = 550;

uint32_t tsLastReport = 0;      //시간 저장용 변수

volatile boolean beatDetect = true;     //맥감감지 여부 확인 변수, 초기는 미감지로 설정

const unsigned char heart [] PROGMEM = {    //심장 표시용 이미지 픽셀 정보
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x7e, 0x00, 0x03, 0xec, 0xc7, 0x00, 
  0x07, 0xe7, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 
  0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0x00, 
  0x01, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char logo [] PROGMEM = {    //로고 이미지 픽셀 정보(필요시 사용)
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xc0, 0xff, 0xfe, 0x0f, 0xff, 0xf0, 
  0xff, 0xff, 0x84, 0x78, 0x3c, 0x47, 0xff, 0xf0, 0xff, 0xff, 0x1e, 0x00, 0x00, 0xf3, 0xff, 0xf0, 
  0xff, 0xff, 0x30, 0x0f, 0xe0, 0x39, 0xff, 0xf0, 0xff, 0xff, 0x20, 0xff, 0xfe, 0x19, 0xff, 0xf0, 
  0xff, 0xff, 0x03, 0xff, 0xff, 0x01, 0xff, 0xf0, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xc3, 0xff, 0xf0, 
  0xff, 0xff, 0x1f, 0xff, 0xff, 0xf3, 0xff, 0xf0, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf9, 0xff, 0xf0, 
  0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0xff, 0xf0, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xf0, 
  0xff, 0xf9, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xf0, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 
  0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 
  0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf0, 0xff, 0xe7, 0x80, 0x3f, 0xe0, 0x0f, 0x9f, 0xf0, 
  0xff, 0xe7, 0x80, 0x3f, 0xe0, 0x0f, 0x9f, 0xf0, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xf0, 
  0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0xff, 0xe7, 0xf8, 0xff, 0xf8, 0xff, 0xcf, 0xf0, 
  0xff, 0xe7, 0xf8, 0xff, 0xf8, 0x7f, 0xcf, 0xf0, 0xff, 0xe7, 0xf8, 0xff, 0xf8, 0xff, 0xcf, 0xf0, 
  0xff, 0xe7, 0xfd, 0xff, 0xfd, 0xff, 0xcf, 0xf0, 0xff, 0xe7, 0xff, 0xf8, 0xff, 0xff, 0xdf, 0xf0, 
  0xff, 0xe7, 0xff, 0x80, 0x0f, 0xff, 0x9f, 0xf0, 0xff, 0xe7, 0xff, 0x18, 0xc7, 0xff, 0x9f, 0xf0, 
  0xff, 0xf7, 0xff, 0x3d, 0xe7, 0xff, 0x9f, 0xf0, 0xff, 0xf3, 0xfe, 0x7f, 0xf7, 0xff, 0x3f, 0xf0, 
  0xff, 0xf3, 0xff, 0x7d, 0xe7, 0xff, 0x3f, 0xf0, 0xff, 0xf9, 0x87, 0x38, 0xe7, 0xbe, 0x3f, 0xf0, 
  0xff, 0xf8, 0x01, 0x80, 0x0c, 0x0e, 0x7f, 0xf0, 0xff, 0xfc, 0x10, 0xc6, 0x18, 0x04, 0xff, 0xf0, 
  0xff, 0xfe, 0x7c, 0xff, 0xf9, 0xe0, 0xff, 0xf0, 0xff, 0xfc, 0xfc, 0xff, 0xf1, 0xf1, 0xff, 0xf0, 
  0xff, 0xfc, 0xfc, 0x7f, 0xf3, 0xf9, 0xff, 0xf0, 0xff, 0xfc, 0xfc, 0xff, 0xf3, 0xf8, 0xff, 0xf0, 
  0xff, 0xf9, 0xfc, 0xff, 0xf3, 0xf8, 0xff, 0xf0, 0xff, 0xf9, 0xfc, 0x1f, 0xe3, 0xfc, 0x7f, 0xf0, 
  0xff, 0xf9, 0xfc, 0x00, 0x01, 0xfc, 0x7f, 0xf0, 0xff, 0xf9, 0xfc, 0xc0, 0x01, 0xfc, 0x7f, 0xf0, 
  0xff, 0xf9, 0xf8, 0xff, 0xf9, 0xfc, 0x7f, 0xf0, 0xff, 0xf9, 0xfd, 0xff, 0xfc, 0xfe, 0x7f, 0xf0, 
  0xff, 0xf9, 0xff, 0xff, 0xfc, 0xfe, 0x7f, 0xf0, 0xff, 0xfd, 0xff, 0xff, 0xfe, 0x7c, 0xff, 0xf0, 
  0xff, 0xfc, 0xf9, 0xff, 0xfe, 0x01, 0xff, 0xf0, 0xff, 0xfe, 0x01, 0xff, 0xff, 0x03, 0xff, 0xf0, 
  0xff, 0xff, 0x81, 0xff, 0xff, 0xc3, 0xff, 0xf0, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xf3, 0xff, 0xf0, 
  0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
  //https://convertio.co/kr/download/de5940f99c01bf9ecb58e3babea0175db2a588/
};

// Setup -----------------------------------------------------------------------------------------------------
void setup() 
{   
    // Configure the PulseSensor object, by assigning our variables to it. 
    pulseSensor.analogInput(PULSE_SIG);   
    pulseSensor.setThreshold(THREASHOLD);  
    Serial.begin(9600); 
    BT.begin(9600);
    
    tft.init(240, 240);          //tft디스플레이 초기화
    tft.fillScreen(ST77XX_WHITE);    
    tft.setTextColor(ST77XX_BLACK); 
    tft.setTextSize(2); 
    tft.drawBitmap(80, 50, heart, 30, 30, ST77XX_RED);     //심장이미지 그리기 (x좌표, y좌표, 이미지, 가로크기, 세로크기, 색상)
    //tft.drawBitmap(100, 120, logo, 64, 64, ST77XX_BLUE); //로고 이미지 그리기
    
    pulseSensor.begin();
}

void loop()
{

    // 1초에 한번씩 맥박여부를 감지해서 맥박이 감지되었다면 화면에 표시
//    if (millis() - tsLastReport > REPORTING_PERIOD_MS) 
//    {
//        if(beatDetect==true)    //맥박감지시
//        { 
          static int heartRate;
          static String stime;
          eraseText(heartRate, stime);      // 이전에 표시했던 문자 지우기
          //tft.fillScreen(ST77XX_WHITE);
          heartRate = pulseSensor.getBeatsPerMinute();   //심장박동수 얻어오기
          stime = BT.readStringUntil('\n');
          Serial.print("Heart rate:");        //시리얼 모니터 심장 박동수 표시하기
          Serial.println(heartRate);
          Serial.print("time:");        //시리얼 모니터 시간 표시하기
          Serial.println(stime);
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(100,80);
          tft.print(stime);
          tft.setCursor(110,55);
          tft.print(heartRate);
          tft.print("bpm");
          BT.write(heartRate);
          delay(1000);
//          tsLastReport = millis();
//          beatDetect=true;
//        }
//        
//    }
}


void eraseText(int heartRate, String stime)    // 이전 표시 문자 지우기 함수
{
  tft.setTextColor(ST77XX_WHITE);
  tft.setCursor(100,80);
  tft.print(stime);
  tft.setCursor(110,55);
  tft.print(heartRate);
  tft.print("bpm");

}
